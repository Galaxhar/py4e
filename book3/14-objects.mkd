
Programação orientada a objetos
===========================

Gerenciando programas maiores
------------------------

\index{orientado a objetos}

No começo desse livro, vimos quatro tipos básicos de padrões de programação
que usamos para construir nossos programas:

* Código sequencial
* Código condicional (sentenças "if")
* Códigos repetitivos (laços)
* Armazenamento e reuso (funções)

Em capítulos mais avançados, exploramos variáveis simples assim como coleções
de estruturas de dados como listas, tuplas e dicionários.

À medida que nós programamos, desenvolvemos a estrutura de dados e escrevemos
o código para manipular tais estruturas. Há muitas formas de programar, e por
agora, você provavelmente escreveu alguns programas "não tão elegantes" e outros
"mais elegantes". Mesmo que os seus programas sejam pequenos, você irá ver como
existe um pouco de arte e estética na programação.

Ao passo que os programas alcançam bilhões de linhas, fica cada vez mais importante
escrever um código que seja fácil de entender. Se você está trabalhando em um programa
de um milhão de linhas, ele nunca estará completamente na sua mente ao mesmo tempo.
Precisamos de meios de quebrar grandes programas em várias peças pequenas para que assim
tenhamos menos coisas para ves quando formos resolver problemas, consertar um erro ou
adicionar algum recurso.

De certo modo, a programação orientada a objetos é uma forma de arrumar seu código, para
que você consiga focar em 50 linhas de código e entendê-las enquanto ignora as outras
999,950 linhas no momento.

Primeiros passos
---------------

Assim como vários aspectos de programação, é necessário aprender os conceitos da 
programação orientada a objetos antes de usá-la efetivamente. Você deveria tomar
esse capítulo como um meio de aprender alguns termos e conceitos e trabalhar em
alguns poucos exemplos para estabelecer uma fundação para um futuro aprendizado.

O resultado principal desse capítulo é ter o básico entendimento de como objetos 
são construídos e como eles funcionam e mais importante: como fazemos uso das
capacidades dos objetos que nos são fornecidas por Python e suas bibliotecas.

Usando objetos
-------------

Como se pode ver, estávamos usando objetos durante todo esse livro. Python
nos fornece vários objetos _built_in_. Aqui está um código simples onde as
primeiras linhas deveriam parecer bem simples e naturais para você.

\index{objeto list}

\VerbatimInput{../code3/party1.py}

Ao invés de focar no que essas linhas querem dizer, vamos olhar no que está
realmente acontecendo desse ponto de vista de programação orientada a objetos.
Não se preocupe se os próximos parágrados não fizerem nenhum sentido na primeira
vez que você lê-los, uma vez que nós não definimos todos esses termos.

A primeir alinha *constrói* um objeto do tipo `list`, a segunda e terceira linhas
*chamam* o *método* `append()`. A quarta linha cham o método `sort()`, e a quinta linha
*recupera* o item na posição 0.

A sexta linha chama o método `__getitem()__` na lista `stuff` com um parâmetro de zero.


~~~~ {.python}
print (stuff.__getitem__(0))
~~~~

A sétima linha é uma maneira bem mais detalhada de recuperar o primeiro item da lista.

~~~~ {.python}
print (list.__getitem__(stuff,0))
~~~~

Nesse código, chamamos o método `__getitem()__` na classe `list` e *passamos* a lista
e o item que queremos recuperar como parâmetros.

As últimas três linhas do programa são equivalentes, mas é mais conveniente simplesmente
utilizar a sintaxe dos colchetes para ver um item de uma posição em particular da lista.

Podemos da ruma olhada nas capacitades de um objeto observando a saída da função `dir()`:

    >>> stuff = list()
    >>> dir(stuff)
    ['__add__', '__class__', '__contains__', '__delattr__',
    '__delitem__', '__dir__', '__doc__', '__eq__',
    '__format__', '__ge__', '__getattribute__', '__getitem__',
    '__gt__', '__hash__', '__iadd__', '__imul__', '__init__',
    '__iter__', '__le__', '__len__', '__lt__', '__mul__',
    '__ne__', '__new__', '__reduce__', '__reduce_ex__',
    '__repr__', '__reversed__', '__rmul__', '__setattr__',
    '__setitem__', '__sizeof__', '__str__', '__subclasshook__',
    'append', 'clear', 'copy', 'count', 'extend', 'index',
    'insert', 'pop', 'remove', 'reverse', 'sort']
    >>>

O restante desse capítulo vai definir todos os temos acima, então tenha certeza de voltar
aqui quando terminá-lo e releia os parágrafos acima para checar seu entendimento.

Iniciando com programas
----------------------

Um programa em sua forma básica recebe algumas entradas, processa algumas informações e 
produz algumas saídas. Nosso código do elevador apresenta um programa bem pequeno,
porém completo, que mostra todos esses três passos.

\VerbatimInput{../code3/elev.py}

Se analisarmos um pouco mais o código, existe o "mundo externo" e o programa.
As expressões de entrada e saída são onde o programa interage com o mundo externo.
Em posse do programa, temos o código e os dados para concluir as tarefas que o 
programa foi feito para resolver.

![A Program](height=1.20in@../images/program)

Uma forma de pensar acerca de programação orientada a objetos é que ela separa o 
programa em multiplas "zonas". Cada zona contem parte do código e dos dados (como
um programa) e tem interações bem definidas com o mundo real e com as outras partes do
programa.

Se olharmos novamente para a aplicação da extração de link em que usamos a
biblioteca BeautfulSoup, podemos ver um programa que está contruído por diferentes 
conexões de objetos juntos para realizar a tarefa

\index{BeautifulSoup}
\index{HTML}
\index{parsing!HTML}

\VerbatimInput{../code3/urllinks.py}

Nós lemos o URL na string e então passamos para o `urllib` para recuperação dos
dados da internet. A biblioteca `urllib` usa a biblioteca `socket` para firmar a 
conexão atual para recuperação dos dados. Captamos a string que o `urllib` retorna e
enviamos para o BeautfulSoup analisar. BeautfulSoup utiliza o objeto
`html.parser`^[https://docs.python.org/3/library/html.parser.html] e retorna um 
objeto. Utilizamos o método `tags()` do objeto retornado para captar um dicionário
de objetos tag. Nós iteramos os tags em acionamos o método `get()` para cada tag
e mostramos em tela o atributo `href`,

Nó podemos desenhar uma imagem desse programa e como os objetos trabalham juntos.

![A Program as Network of Objects](height=1.50in@../images/program-oo)

A intenção aqui não é entender perfeitamente como o programa funciona, mas ver como
construímos uma rede de objetos interativos e como orquestrar o fluxo de informações
entre os objetos para criar o programa. É também importante notar que quando 
você olhou para o programa há alguns capítulos atrás, você conseguiu entender
completamente o que estava acontecendo com o programa sem imaginar que ele estava 
"orquestrando o movimento dos dados entre os objetos". Isso foram apenas linhas
de código que completaram o trabalho.

Subdividindo um problema
---------------------

Umas das vantagens da programação orientada a objetos é que ela consegue esconder
a complexidade do código. Por exemplo, enquanto precisamos saber como usar os 
códigos do `urllib` e BeautifulSoup, nós não precisamos saber como essas bibliotecas 
funcionam internamente. Isso nos permite focar na resolução do problema e ignorar as
outras partes do programa

![Ignoring Detail When Using an Object](height=1.50in@../images/program-oo-code)

Essa habilidade de focar exclusivamente na parte importante do programa e ignorar
o resto também é útil para os desenvolvedores dos objetos que usamos. Por exemplo,
desenvolvendo o BeautifulSoup os programadores não precisam saber ou se importar 
como recuperamos nossa página HTML, que partes queremos ler ou o quais ou planos 
que temos com os dados extraídos da página.

![Ignoring Detail When Building an Object](height=1.50in@../images/program-oo-bs4)

Nosso primeiro objeto em Python
-----------------------

Em um nível básico, um objeto é simplesmente algumas estruturas de dados de código que 
são menores do que um programa inteiro. Definir uma função nos permite armazenar um código 
,dando-lhe um nome , em seguida, chama-la mais tarde usando o nome da função para usa-la.

Um objeto pode conter um número de funções (que chamamos de  *métodos*) bem 
como os dados que são usados por essas funções.  Chamamos itens de dados que 
fazem parte dos *atributos* do objeto.

\index{palavra-chave classe}

usamos a palavra-chave `classe` para definir os dados e o código que compõem cada 
um dos objetos. A palavra-chave classe inclui o nome da classe e começa um bloco 
recuado de código onde incluímos os atributos (dados) e métodos (código).

\VerbatimInput{../code3/party2.py}

cada método se parece com uma função, começando com a palavra-chave `def` e 
consistindo em um bloco de código recuado. Este objeto tem um atribui (`x`)
e um método (`parte`). Os métodos têm um primeiro parâmetro especial que
nomeamos por convenção `self`.

assim como a palavra `def` não causa a execução do código de função, a palavra
`class` não cria um objeto.  em vez disso, a `class`define um modelo que indica 
quais dados e código serão contidos em cada objeto do tipo `PartyAnimal`. 
A classe é como um cortador de biscoitos e os objetos criados usando a classe 
são os biscoitos^[Cookie image copyright CC-BY
https://www.flickr.com/photos/dinnerseries/23570475099].
You don't put frosting on the cookie cutter;
you put frosting on the cookies, and you can put different frosting
on each cookie.

![uma classe e dois objetos](height=2.0in@../photos/cookie_cutter_flickr_Didriks)

Se continuarmos através deste programa de exemplo, vemos a primeira linha 
de código executável:

~~~~ {.python}
an = PartyAnimal()
~~~~

\index{construtor}
\index{objeto}
\index{Instância}
\index{classe}

É aqui que instruímos o Python a construir (i.e., create) um *objeto* ou
*instância* da classe `PartyAnimal`. Ele se parece com uma chamada de função 
para a classe que eu mesmo.  O Python constrói o objeto com os dados e métodos 
certos e retorna o objeto que é então atribuído à variável `an`.
De uma maneira, isto é completamente similar à seguinte linha que temos usado:

~~~~ {.python}
counts = dict()
~~~~

Aqui, instruímos o Python a construir um objeto usando o `dict` Modelo
(já presente em Python), retornar a instância do dicionário,
e atribuí-lo à variável`counts`.

Quando o `PartyAnimal` classe é usada para construir um objeto, a variável `an`
é usado para apontar para esse objeto. Usamos `an` para acessar o código e os dados para 
essa instância específica da classe `PartyAnimal`.

Cada PartyAnimal  objeto/instância contém dentro dele uma variável `x`
e um metodo/função nomeada `party`. Chamamos `party` o método nesta linha :

~~~~ {.python}
an.party()
~~~~

Quando ométodo `party` é chamado, o primeiro parametro (que chamamos por Convenção de `self`)
aponta para a instância específica do objeto PartyAnimal que é chamado de `party` .
Dentro do método `party` , vemos a linha:

~~~~ {.python}
self.x = self.x + 1
~~~~

Essa sintaxe usando o operador *dot*  está dizendo 'o x dentro de si mesmo.' Cada vez que `party()` é
chamado, o interno `x` valor é incrementado por 1 e o valor é impresso.

A seguinte linha é outra maneira de chamar o método `party`  dentro do `an`
objeto:

~~~~ {.python}
PartyAnimal.party(an)
~~~~

Nessa variação, acessamos o código de dentro da classe e explicitamente
passar o ponteiro do objeto `an` como o primeiro parâmetro(i.e., `self` dentro do método).
Você pode pensar em `an.party()` como abreviada para a linha acima.

Quando o programa é executado, ele produz a seguinte saída:

~~~~
So far 1
So far 2
So far 3
So far 4
~~~~

O objeto é construído e o método  `party`  é chamado quatro vezes,
incrementando e imprimindo o valor para `x` dentro do objeto `an`.

classes como tipos
----------------

\index{dir}
\index{tipo}

Como vimos, em Python todas as variáveis têm um tipo. Nós podemos usar o built-in
`dir` função para examinar os recursos de uma variável. Nós também podemos usar `tipo` 
e `dir` com as classes que criamos.

\VerbatimInput{../code3/party3.py}

Quando este programa é executado, ele produz a seguinte saída:

~~~~
Type <class '__main__.PartyAnimal'>
Dir  ['__class__', '__delattr__', ...
'__sizeof__', '__str__', '__subclasshook__',
'__weakref__', 'party', 'x']
Type <class 'int'>
Type <class 'method'>
~~~~

Você pode ver que usando a palavra `classe` , Criamos um novo tipo.
A partir da saídac`dir`, Você pode ver tanto o`x` atributo inteiro e o método
`party` estão disponíveis no objeto.

Object lifecycle
----------------

\index{constructor}
\index{destructor}
\index{object lifecycle}

In the previous examples, we define a class (template), use that class
to create an instance of that class (object), and then use the instance.  When
the program finishes, all of the variables are discarded.  Usually, we don't think
much about the creation and destruction of variables, but often as our objects
become more complex, we need to take some action within the object to set things
up as the object is constructed and possibly clean things up as the object is
discarded.

If we want our object to be aware of these moments of construction and destruction,
we add specially named methods to our object:

\VerbatimInput{../code3/party4.py}

When this program executes, it produces the following output:

~~~~
I am constructed
So far 1
So far 2
I am destructed 2
an contains 42
~~~~

As Python constructs our object, it calls our `__init__` method to
give us a chance to set up some default or initial values for the object.
When Python encounters the line:

~~~~
an = 42
~~~~

It actually "thows our object away" so it can reuse the `an` variable
to store the value `42`.  Just at the moment when our `an` object is
being "destroyed" our destructor code (`__del__`) is called.  We cannot
stop our variable from being destroyed, but we can do any necessary
cleanup right before our object no longer exists.

When developing objects, it is quite common to add a constructor to an object
to set up initial values for the object. It is relatively rare to need a
destructor for an object.

Multiple instances
------------------

So far, we have defined a class, constructed a single object, used
that object, and then thrown the object away. However, the real power
in object-oriented programming happens when we construct multiple instances
of our class.

When we construct multiple objects from our class, we might want to set
up different initial values for each of the objects. We can
pass data to the constructors to give each object a different initial
value:

\VerbatimInput{../code3/party5.py}

The constructor has both a `self` parameter that points to the object instance
and additional parameters that are passed into the constructor as the
object is constructed:

~~~~
s = PartyAnimal('Sally')
~~~~

Within the constructor, the second line copies the parameter (`nam`) that is
passed into the `name` attribute within the object instance.

~~~~
self.name = nam
~~~~

The output of the program shows that each of the objects (`s` and `j`) contain their own
independent copies of `x` and `nam`:

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Sally party count 2
~~~~

Inheritance
-----------

Another powerful feature of object-oriented programming is the ability to
create a new class by extending an existing class.  When extending a class,
we call the original class the *parent class* and the new class the
*child class*.

For this example, we move our `PartyAnimal` class into its own file.
Then, we can 'import' the `PartyAnimal` class in a new file and extend it, as follows:

\VerbatimInput{../code3/party6.py}

When we define the `CricketFan` class, we indicate that we are extending
the `PartyAnimal` class.  This means that all of the variables (`x`) and methods
(`party`) from the `PartyAnimal` class are *inherited* by the `CricketFan` class.
For example, within the `six` method in the `CricketFan` class, we 
call the `party` method from the `PartyAnimal` class.

As the program executes, we create `s` and `j` as independent instances
of `PartyAnimal` and `CricketFan`. The `j` object has additional capabilities beyond
the `s` object.

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
['__class__', '__delattr__', ... '__weakref__',
'name', 'party', 'points', 'six', 'x']
~~~~

In the `dir` output for the `j` object (instance of the `CricketFan` class), we see
that it has the attributes and methods of the parent class, as well as the attributes
and methods that were added when the class was extended to create the `CricketFan` class.

Sumário
-------

Esta é uma rápida introdução à programação orientada a objetos, que foca principalmente na terminologia e na sintaxe da definição e uso de objetos. Vamos rapidamente rever o código que nós vimos no início do capítulo. Neste ponto você já deve entender completamente o que está acontecendo.

\VerbatimInput{../code3/party1.py}

A primeira linha constrói uma `list` (lista) de *objetos*. Quando Python cria a `list` de objetos, ele chama o método *construtor* (chamado `__init__`) para inicializar os atributos de dados internos que serão usados para armazenar os dados da lista. Nós não passamos nenhum parâmetro para o *construtor*. Quando o construtor retorna, nós usamos a variável `coisas` para apontar para a instância retornada da classe `list`.

A segunda e terceira linhas chamam o método `append` com um parâmetro para adicionar um novo item no fim da lista atualizando os atributos dentro de `coisas`. Então, na linha quatro, chamamos o método `sort` sem nenhum parâmetro para ordenar os dados dentro do objeto `coisas`.

Então, nós iremos imprimir o primeiro item da lista usando colchetes, que são uma maneira mais curta de chamar o método `__getitem__`. Seria o equivalente a chamar o método `__getitem__` da *classe* `list` e passar o objeto `coisas` como primeiro parâmetro e a posição desejada como segundo parâmetro.

No fim do programa, o objeto `coisas` é descartado, mas não antes de chamar o *destruidor* (chamado `__del__`) para que o objeto possa limpar qualquer dado que tenha sido deixado para trás, conforme o necessário.

Esses são conceitos básicos para programação orientada a objetos. Há muitos detalhes sobre a melhor maneira de usar abordagens orientadas a objeto ao desenvolver aplicativos, e também grandes bibliotecas que estão fora do escopo deste capítulo.^[Se você estiver curioso sobre onde a classe `list` é definida, dê uma olhada em (espero que a URL não mude)
https://github.com/python/cpython/blob/master/Objects/listobject.c -
a classe list é escrita numa linguagem chamada “C”. Se você der uma olhada nesse código-fonte e achar curioso, talvez queira explorar alguns cursos de Ciência da Computação.]

Glossário
---------

atributo
:   Uma variável que é parte de uma classe.
\index{atributo}

classe
:   Um modelo usado para a construção de um objeto. Define os atributos e métodos que farão parte do objeto.
\index{classe}

clase filha
:   Uma nova classe criada quando a classe pai é estendida. A classe filha herda os atributos e métodos da classe pai.
\index{classe filha}

construtor
:   Um método opcional especialmente nomeado (`__init__`) que é chamado no momento em que uma classe está sendo usada para construir um objeto. Normalmente é usado para definir os valores iniciais do objeto.
\index{construtor}

destruidor
:   Um método opcional especialmente nomeado (`__del__`) que é chamado no momento imediatamente anterior ao objeto ser destruído. Destruidores são raramente usados.
\index{destruidor}

herança
:   Quando nós criamos uma nova classe (filha) estendendo uma classe existente (pai). A classe filha tem todos os atributos e métodos da classe pai mais atributos e métodos adicionais definidos por ela mesma.
\index{herança}

método
:   Uma função contida numa classe e nos objetos construídos pela classe. Alguns padrões orientados a objeto usam 'mensagem' em vez de 'método' para descrever esse conceito.
\index{método}
\index{mensagem}

objeto
:   Uma instância construída de uma classe. Um objeto contém todos os atributos e métodos que foram definidos pela classe. Algumas documentações orientadas a objeto usam o termo 'instância' e 'objeto' indistintamente.
\index{método}

classe pai
:   A classe que está sendo estendida para criar uma nova classe filha. A classe pai contribui com todos os seus métodos e atributos para a nova classe filha.
\index{classe pai}








